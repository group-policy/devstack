#!/bin/bash
#
# lib/gbp
# functions - functions specific to group-based-policy

# Dependencies:
# ``functions`` file
# ``DEST`` must be defined
# ``STACK_USER`` must be defined

# ``stack.sh`` calls the entry points in this order:
#
# - install_gbp
# - install_gbpclient
# - init_gbp
#
# ``unstack.sh`` calls the entry points in this order:

# Set up default directories
GBPSERVICE_DIR=$DEST/gbp
GBPCLIENT_DIR=$DEST/python-gbpclient
GBPHEAT_DIR=$DEST/gbpautomation
GBPUI_DIR=$DEST/gbpui
NEUTRON_CONF_DIR=/etc/neutron
NEUTRON_CONF=$NEUTRON_CONF_DIR/neutron.conf
GBP_CONF_DIR=/etc/gbp

GBP_CREATE_INITIAL_MODEL=${GBP_CREATE_INITIAL_MODEL:-True}
# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace


# Functions
# ---------

# init_gbpservice() - Initialize databases, etc.
function init_gbpservice {
    # Run GBP db migrations
    gbp-db-manage --config-file $NEUTRON_CONF --config-file /$Q_PLUGIN_CONF_FILE upgrade head
    iniset $NEUTRON_CONF DEFAULT policy_dirs $GBP_CONF_DIR
}

# install_gbpservice() - Collect source and prepare
function install_gbpservice {
    git_clone $GBPSERVICE_REPO $GBPSERVICE_DIR $GBPSERVICE_BRANCH
    sed -i '/gbptestneutron/d' $GBPSERVICE_DIR/test-requirements.txt
    setup_develop $GBPSERVICE_DIR
    sudo mkdir -p /etc/gbp
    sudo cp -f $GBPSERVICE_DIR/etc/policy.json $GBP_CONF_DIR/gbp-policy.json
    sudo ln -nfs /etc/neutron/policy.json $GBP_CONF_DIR/policy.json
}

# install_gbpclient() - Collect source and prepare
function install_gbpclient {
    git_clone $GBPCLIENT_REPO $GBPCLIENT_DIR $GBPCLIENT_BRANCH
    setup_develop $GBPCLIENT_DIR
    sudo install -D -m 0644 -o $STACK_USER {$GBPCLIENT_DIR/tools/,/etc/bash_completion.d/}gbp.bash_completion
}

# install_gbpclient() - Collect source and prepare
function install_gbpheat {
    git_clone $GBPHEAT_REPO $GBPHEAT_DIR $GBPHEAT_BRANCH
    setup_develop $GBPHEAT_DIR
}

# install_gbpui() - Collect source and prepare
function install_gbpui {
    git_clone $GBPUI_REPO $GBPUI_DIR $GBPUI_BRANCH
    setup_develop $GBPUI_DIR
    ln -sf $GBPUI_DIR/gbpui/_*project*.py $HORIZON_DIR/openstack_dashboard/enabled
}

function create_gbp_initial_model {
    TENANT_ID=$(openstack project list | grep " demo " | get_field 1)
    die_if_not_set $LINENO TENANT_ID "Failure retrieving TENANT_ID for demo"

    # Create Neutron external network and Subnet
    EXT_NET_ID=$(neutron net-create "$PUBLIC_NETWORK_NAME" -- --router:external=True --shared | grep ' id ' | get_field 2)
    die_if_not_set $LINENO EXT_NET_ID "Failure creating EXT_NET_ID for $PUBLIC_NETWORK_NAME"
    if [[ "$IP_VERSION" =~ 4.* ]]; then
        EXT_SUB_ID=$(neutron subnet-create --tenant_id $TENANT_ID --name $PUBLIC_SUBNET_NAME --gateway $PUBLIC_NETWORK_GATEWAY --ip_version 4 ${Q_FLOATING_ALLOCATION_POOL:+--allocation-pool $Q_FLOATING_ALLOCATION_POOL} $EXT_NET_ID $FLOATING_RANGE | grep ' id ' | get_field 2)
    fi
    if [[ "$IP_VERSION" =~ .*6 ]]; then
        EXT_SUB_ID=$(neutron subnet-create --tenant_id $TENANT_ID --name $IPV6_PUBLIC_SUBNET_NAME --gateway $IPV6_PUBLIC_NETWORK_GATEWAY --ip_version 6 $EXT_NET_ID $IPV6_PUBLIC_RANGE | grep ' id ' | get_field 2)
    fi
    die_if_not_set $LINENO EXT_SUB_ID "Failure creating EXT_SUB_ID"

    # Create default external segment
    EXT_SEG_ID=$(gbp external-segment-create default --subnet_id $EXT_SUB_ID --external-route destination=0.0.0.0/0,nexthop='' --shared True | grep ' id ' | get_field 2)
    die_if_not_set $LINENO EXT_SEG_ID "Failure creating EXT_NET_ID for default"

    # Create shared allow action
    ALLOW_ACTION_ID=$(gbp policy-action-create allow --action-type allow --shared True | grep ' id ' | get_field 2)
    die_if_not_set $LINENO ALLOW_ACTION_ID "Failure creating ALLOW_ACTION_ID for allow"

    # Create icmp classifier
    ICMP_CLASS_ID=$(gbp policy-classifier-create icmp-bi --protocol icmp --direction bi --shared True | grep ' id ' | get_field 2)
    die_if_not_set $LINENO ICMP_CLASS_ID "Failure creating ICMP_CLASS_ID for icmp-bi"

    # Create ssh classifier
    SSH_CLASS_ID=$(gbp policy-classifier-create ssh-bi --protocol tcp --port-range 22 --direction bi --shared True | grep ' id ' | get_field 2)
    die_if_not_set $LINENO SSH_CLASS_ID "Failure creating SSH_CLASS_ID for ssh-bi"

    # Create icmp rule
    ICMP_RULE_ID=$(gbp policy-rule-create icmp-bi-allow --classifier $ICMP_CLASS_ID --actions $ALLOW_ACTION_ID --shared True | grep ' id ' | get_field 2)
    die_if_not_set $LINENO ICMP_RULE_ID "Failure creating ICMP_RULE_ID for icmp-bi-allow"

    # Create ssh rule
    SSH_RULE_ID=$(gbp policy-rule-create ssh-bi-allow --classifier $SSH_CLASS_ID --actions $ALLOW_ACTION_ID --shared True | grep ' id ' | get_field 2)
    die_if_not_set $LINENO SSH_RULE_ID "Failure creating SSH_RULE_ID for ssh-bi-allow"

    # Create network service policy
    NSP_ID=$(gbp network-service-policy-create vip-ip-policy --network-service-params type=ip_single,name=vip_ip,value=self_subnet --shared True | grep ' id ' | get_field 2)
    die_if_not_set $LINENO NSP_ID "Failure creating NSP_ID for vip_ip_policy"
}

# Restore xtrace
$XTRACE

# Tell emacs to use shell-script-mode
## Local variables:
## mode: shell-script
## End:
