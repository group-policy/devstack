#!highlight yaml

heat_template_version: 2013-05-23

resources:

# Create firewall service chain node
    sc_fw_node:
        type: OS::Neutron::ServiceChainNode
        properties:
            name: Transparent_Firewall_Node
            service_type: FIREWALL_TRANSPARENT
            config: { get_file: transparent_fw_appliance.yaml }

# Create IDS service chain node
    sc_ids_node:
        type: OS::Neutron::ServiceChainNode
        properties:
            name: Intrusion_Detection_Service
            service_type: IDS
            config: { get_file: transparent_ids_appliance.yaml }

# Create loadbalancer service chain node
    sc_lb_node:
        type: OS::Neutron::ServiceChainNode
        properties:
            name: Loadbalancer_Node
            service_type: LOADBALANCER
            config: { get_file: lb_vip_description.template }

# Tie the services into a chain
    sc_spec:
        type: OS::Neutron::ServiceChainSpec
        depends_on: [ sc_fw_node, sc_ids_node, sc_lb_node ]
        properties:
            name: FW_IDS_LB_Chain_Spec
            nodes:
                - { get_resource: sc_fw_node }
                - { get_resource: sc_ids_node }
                - { get_resource: sc_lb_node }

# Create a network service policy
    vip_ip_policy:
        type: OS::Neutron::NetworkServicePolicy
        properties:
            name: VIP_Policy
            network_service_params: 
                - type: ip_single
                  name: vip_ip
                  value: self_subnet
            shared: True

# Creating a classifier for all tcp traffic
    any_tcp_classifier:
        type: OS::Neutron::PolicyClassifier
        properties:
            name: TCP_Classifier
            protocol: tcp
            port_range: '80'
            direction: in
            shared: True

# Creating redirect action
    redirect_to_chain:
        type: OS::Neutron::PolicyAction
        depends_on: sc_spec
        properties:
            name: Redirect_To_FW_IDS_LB_Chain_Action
            action_type: redirect
            action_value: { get_resource: sc_spec }
            shared: False

# Creating a policy rule set
    tcp_traffic_rule:
        type: OS::Neutron::PolicyRule
        depends_on: [ any_tcp_classifier, redirect_to_chain ]
        properties:
            name: Allow_TCP_with_Redirect_Rule
            policy_classifier_id: { get_resource: any_tcp_classifier }
            policy_actions: [{ get_resource: redirect_to_chain }]
            shared: False

    tcp_rule_set:
        type: OS::Neutron::PolicyRuleSet
        depends_on: tcp_traffic_rule
        properties:
            name: tcp_rule_set
            policy_rules: [{ get_resource: tcp_traffic_rule }] 
            child_policy_rule_sets: []
            shared: False

    l3_policy:
        type: OS::Neutron::L3Policy
        properties:
            name: IP_Policy
            shared: False

    l2_policy:
        type: OS::Neutron::L2Policy
        depends_on: l3_policy
        properties:
            name: App_Domain
            l3_policy_id: { get_resource: l3_policy }
            shared: False

# Create PTGs for providers and consumers

    app_ptg:
        type: OS::Neutron::PolicyTargetGroup
        depends_on: [ tcp_rule_set, l2_policy ]
        properties:
            name: App_PTG
            l2_policy_id: { get_resource: l2_policy }
            provided_policy_rule_sets: 
                - policy_rule_set_id: { get_resource: tcp_rule_set }
                  policy_rule_set_scope: 
            network_service_policy_id: { get_resource: vip_ip_policy }
            shared: False

    client_ptg:
        type: OS::Neutron::PolicyTargetGroup
        depends_on: [ app_server_pt3, l2_policy ]
        properties:
            name: Client_PTG
            l2_policy_id: { get_resource: l2_policy }
            shared: False

# Launch instances in PTGs

    app_server_pt1:
        type: OS::Neutron::PolicyTarget
        depends_on: app_ptg
        properties:
            name: app_server_pt1
            description: 'Pool Member'
            policy_target_group_id: { get_resource: app_ptg }

    app_server_pt2:
        type: OS::Neutron::PolicyTarget
        depends_on: app_server_pt1
        properties:
            name: app_server_pt2
            description: 'Pool Member'
            policy_target_group_id: { get_resource: app_ptg }

    app_server_pt3:
        type: OS::Neutron::PolicyTarget
        depends_on: app_server_pt2
        properties:
            name: app_server_pt3
            description: 'Pool Member'
            policy_target_group_id: { get_resource: app_ptg }

    app_server1:
        type: OS::Nova::Server
        depends_on: app_server_pt1
        properties:
            name: App_Real_Server_1
            image: cirros-0.3.2-x86_64-uec
            flavor: m1.nano
            networks:
                - port: {get_attr: [app_server_pt1, port_id]}

    app_server2:
        type: OS::Nova::Server
        depends_on: app_server_pt2
        properties:
            name: App_Real_Server_2
            image: cirros-0.3.2-x86_64-uec
            flavor: m1.nano
            networks:
                - port: {get_attr: [app_server_pt2, port_id]}

    app_server3:
        type: OS::Nova::Server
        depends_on: app_server_pt3
        properties:
            name: App_Real_Server_3
            image: cirros-0.3.2-x86_64-uec
            flavor: m1.nano
            networks:
                - port: {get_attr: [app_server_pt3, port_id]}

    client_pt:
        type: OS::Neutron::PolicyTarget
        depends_on: client_ptg
        properties:
            name: client_pt
            policy_target_group_id: { get_resource: client_ptg }

    client_vm:
        type: OS::Nova::Server
        depends_on: client_pt
        properties:
            name: Client_VM
            image: cirros-0.3.2-x86_64-uec
            flavor: m1.nano
            networks:
                - port: {get_attr: [client_pt, port_id]}
